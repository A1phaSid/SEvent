// Boilerplate Code: Event Management System

// === Backend Setup ===
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const QRCode = require('qrcode');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Models
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String, // For simplicity; use bcrypt for hashing in production
  role: { type: String, default: 'attendee' },
});

const EventSchema = new mongoose.Schema({
  title: String,
  date: Date,
  venue: String,
  capacity: Number,
  attendees: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
});

const RSVP = mongoose.model('RSVP', new mongoose.Schema({
  eventId: { type: mongoose.Schema.Types.ObjectId, ref: 'Event' },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  qrCode: String,
}));

const User = mongoose.model('User', UserSchema);
const Event = mongoose.model('Event', EventSchema);

// === Routes ===

// User Registration
app.post('/api/auth/register', async (req, res) => {
  const { name, email, password } = req.body;
  const user = new User({ name, email, password });
  await user.save();
  res.status(201).json({ message: 'User registered successfully' });
});

// User Login
app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || user.password !== password) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }
  const token = jwt.sign({ id: user._id, role: user.role }, 'secretKey'); // Use env variable in production
  res.json({ token });
});

// Create Event (Admin Only)
app.post('/api/events', async (req, res) => {
  const { title, date, venue, capacity } = req.body;
  const event = new Event({ title, date, venue, capacity });
  await event.save();
  res.status(201).json(event);
});

// RSVP to Event
app.post('/api/rsvp', async (req, res) => {
  const { eventId, userId } = req.body;

  // Generate QR Code
  const qrCodeData = `${eventId}_${userId}`;
  const qrCode = await QRCode.toDataURL(qrCodeData);

  const rsvp = new RSVP({ eventId, userId, qrCode });
  await rsvp.save();

  res.status(201).json({ message: 'RSVP successful', qrCode });
});

// Fetch Events
app.get('/api/events', async (req, res) => {
  const events = await Event.find();
  res.json(events);
});

// Fetch RSVPs for Event
app.get('/api/rsvp/:eventId', async (req, res) => {
  const { eventId } = req.params;
  const rsvps = await RSVP.find({ eventId }).populate('userId', 'name email');
  res.json(rsvps);
});

// Start Server
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
